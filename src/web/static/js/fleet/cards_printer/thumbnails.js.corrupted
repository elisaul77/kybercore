// üñºÔ∏è M√ìDULO THUMBNAILS - Gesti√≥n de miniaturas y visualizaci√≥n de im√°genes
// Manejo de la carga, visualizaci√≥n y                             <h3 class="text-lg font-bold text-gray-900">üñºÔ∏è Vistas Previas: ${window.FleetCards.Utils.escapeHtml(filename)}</h3>esti√≥n de thumbnails de archivos G-code

window.FleetCards = window.FleetCards || {};

window.FleetCards.Thumbnails = {
    // üñºÔ∏è Cargar y mostrar thumbnail peque√±o en el elemento especificado
    async loadAndShowThumbnail(printerId, filename, thumbnailElement) {
        console.log('üñºÔ∏è Cargando thumbnail para:', filename);
        
        // Mostrar indicador de carga
        thumbnailElement.innerHTML = '<div class="animate-spin w-4 h-4 border-2 border-purple-500 border-t-transparent rounded-full"></div>';
        
        try {
            const response = await fetch(`/api/fleet/printers/${printerId}/files/${encodeURIComponent(filename)}/thumbnails`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('üñºÔ∏è Thumbnails recibidos:', data);
            
            if (data.thumbnails && data.thumbnails.length > 0) {
                // Usar el primer thumbnail disponible (generalmente el m√°s peque√±o)
                const thumbnail = data.thumbnails[0];
                const imgSrc = `data:image/png;base64,${thumbnail.data}`;
                
                thumbnailElement.innerHTML = `
                    <img src="${imgSrc}" 
                         class="w-full h-full object-cover rounded" 
                         alt="Vista previa"
                         title="${thumbnail.width}x${thumbnail.height}">
                `;
                
                console.log('‚úÖ Thumbnail cargado:', `${thumbnail.width}x${thumbnail.height}`);
            } else {
                thumbnailElement.innerHTML = '<span class="text-gray-400 text-xs">‚ùå</span>';
                thumbnailElement.title = 'Sin vista previa disponible';
            }
            
        } catch (error) {
            console.error('‚ùå Error cargando thumbnail:', error);
            thumbnailElement.innerHTML = '<span class="text-red-400 text-xs">‚ùå</span>';
            thumbnailElement.title = `Error: ${error.message}`;
        }
    },

    // üñºÔ∏è Mostrar todos los thumbnails disponibles en un modal
    async showFullThumbnail(printerId, filename) {
        console.log('üñºÔ∏è Mostrando thumbnails completos para:', filename);
        
        try {
            const response = await fetch(`/api/fleet/printers/${printerId}/files/${encodeURIComponent(filename)}/thumbnails`);
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || `HTTP ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üñºÔ∏è Thumbnails recibidos completos:', data);
            
            // Manejar la estructura de thumbnails (puede ser un objeto o array)
            let thumbnailsArray = [];
            if (data.thumbnails) {
                if (Array.isArray(data.thumbnails)) {
                    thumbnailsArray = data.thumbnails;
                } else if (typeof data.thumbnails === 'object') {
                    // Convertir objeto a array
                    thumbnailsArray = Object.values(data.thumbnails);
                }
            }
            
            if (thumbnailsArray.length === 0) {
                window.FleetCards.Core.showToast('No hay vistas previas disponibles para este archivo', 'info');
                return;
            }
            
            // Crear modal de thumbnails
            const thumbnailsHTML = thumbnailsArray.map((thumbnail, index) => {
                const dataUrl = `data:image/png;base64,${thumbnail.data}`;
                
                return `
                    <div class="bg-white rounded-lg p-4 border border-gray-200">
                        <div class="text-center mb-2 font-medium">Vista previa ${index + 1}</div>
                        <div class="mb-2 flex justify-center">
                            <img src="${dataUrl}" 
                                 class="max-w-full max-h-48 object-contain rounded border" 
                                 alt="Vista previa ${index + 1}">
                        </div>
                        <div class="text-xs text-gray-600 text-center">
                            ${thumbnail.width}√ó${thumbnail.height} ‚Ä¢ ${window.FleetCards.Utils.formatFileSize(thumbnail.size || 0)}
                        </div>
                    </div>
                `;
            }).join('');
                
                return `
                    <div class="bg-white rounded-lg p-4 border border-gray-200">
                        <div class="text-center mb-2 font-medium">Vista previa ${index + 1}</div>
                        <div class="mb-2 flex justify-center">
                            <img src="${dataUrl}" 
                                 class="max-w-full max-h-48 object-contain rounded border" 
                                 alt="Vista previa ${index + 1}">
                        </div>
                        <div class="text-xs text-gray-600 text-center">
                            ${thumbnail.width}√ó${thumbnail.height} ‚Ä¢ ${window.FleetCards.Utils.formatFileSize(thumbnail.size || 0)}
                        </div>
                    </div>
                `;
            }).join('');
            
            const modalHTML = `
                <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onclick="this.remove()">
                    <div class="bg-white rounded-xl max-w-4xl max-h-96 overflow-y-auto p-6 m-4" onclick="event.stopPropagation()">
                        <div class="flex items-center justify-between mb-4">
                            <h3 class="text-lg font-bold text-gray-900">ÔøΩÔ∏è Vistas Previas: ${window.FleetCards.Utils.escapeHtml(filename)}</h3>
                            <button class="text-gray-500 hover:text-gray-700" onclick="this.closest('.fixed').remove()">‚úï</button>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            ${thumbnailsHTML}
                        </div>
                        
                        <div class="mt-4 pt-4 border-t text-center">
                            <button onclick="this.closest('.fixed').remove()" 
                                    class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded-lg transition-colors">
                                Cerrar
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            // Mostrar modal
            document.body.insertAdjacentHTML('beforeend', modalHTML);
            
        } catch (error) {
            console.error('‚ùå Error cargando thumbnails:', error);
            window.FleetCards.Core.showToast(`Error cargando vistas previas: ${error.message}`, 'error');
        }
    },

    // üèóÔ∏è Crear modal de visualizaci√≥n de thumbnail
    createThumbnailModal() {
        const modal = document.createElement('div');
        modal.id = 'thumbnail-modal';
        modal.className = 'hidden fixed inset-0 bg-black bg-opacity-75 z-50 items-center justify-center';
        modal.tabIndex = -1; // Para poder enfocar y usar teclado
        
        modal.innerHTML = `
            <div class="relative max-w-4xl max-h-full mx-4 my-8 flex flex-col">
                <!-- Header -->
                <div class="bg-white rounded-t-2xl px-6 py-4 border-b">
                    <div class="flex items-center justify-between">
                        <h3 id="thumbnail-modal-title" class="text-lg font-bold text-gray-900">üñºÔ∏è Vista previa</h3>
                        <button onclick="window.FleetCards.Thumbnails.hideThumbnailModal()" 
                                class="text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-full p-2 transition-colors"
                                title="Cerrar (Esc)">
                            ‚ùå
                        </button>
                    </div>
                </div>

                <!-- Image Content -->
                <div class="bg-white flex-1 flex items-center justify-center p-6 overflow-hidden">
                    <div class="relative">
                        <img id="thumbnail-modal-image" 
                             src="" 
                             alt="Vista previa"
                             class="max-w-full max-h-96 object-contain rounded-lg shadow-lg"
                             style="min-width: 200px; min-height: 200px;">
                        
                        <!-- Loading indicator -->
                        <div id="thumbnail-loading" class="absolute inset-0 flex items-center justify-center bg-gray-100 rounded-lg">
                            <div class="flex items-center gap-2 text-gray-500">
                                <div class="animate-spin w-5 h-5 border-2 border-gray-400 border-t-transparent rounded-full"></div>
                                <span class="text-sm">Cargando imagen...</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Footer -->
                <div class="bg-white rounded-b-2xl px-6 py-4 border-t">
                    <div id="thumbnail-modal-info" class="text-center">
                        <!-- Info will be populated dynamically -->
                    </div>
                </div>
            </div>
        `;
        
        // Agregar eventos
        modal.addEventListener('click', (e) => {
            // Cerrar al hacer clic fuera del contenido
            if (e.target === modal) {
                this.hideThumbnailModal();
            }
        });
        
        modal.addEventListener('keydown', (e) => {
            // Cerrar con Escape
            if (e.key === 'Escape') {
                this.hideThumbnailModal();
            }
        });
        
        // Manejar eventos de carga de imagen
        const image = modal.querySelector('#thumbnail-modal-image');
        const loading = modal.querySelector('#thumbnail-loading');
        
        if (image && loading) {
            image.addEventListener('load', () => {
                loading.style.display = 'none';
            });
            
            image.addEventListener('error', () => {
                loading.innerHTML = `
                    <div class="text-red-500 text-center">
                        <div class="text-2xl mb-2">‚ö†Ô∏è</div>
                        <div class="text-sm">No se pudo cargar la imagen</div>
                    </div>
                `;
            });
            
            image.addEventListener('loadstart', () => {
                loading.style.display = 'flex';
            });
        }
        
        return modal;
    },

    // üëÅÔ∏è Ocultar modal de thumbnail
    hideThumbnailModal() {
        const modal = document.getElementById('thumbnail-modal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            console.log('‚úÖ Modal de thumbnail ocultado');
        }
    },

    // üîÑ Precargar thumbnails para mejorar rendimiento
    preloadThumbnails(files, printerId) {
        console.log('üîÑ Precargando', files.length, 'thumbnails para impresora:', printerId);
        
        const thumbnailsToPreload = files.filter(file => file.thumbnail_path);
        
        if (thumbnailsToPreload.length === 0) {
            console.log('üì≠ No hay thumbnails para precargar');
            return;
        }

        console.log('üñºÔ∏è Precargando', thumbnailsToPreload.length, 'thumbnails...');
        
        thumbnailsToPreload.forEach(file => {
            const img = new Image();
            img.src = `/api/fleet/printers/${printerId}/files/thumbnail/${encodeURIComponent(file.name)}`;
            
            img.onload = () => {
                console.log('‚úÖ Thumbnail precargado:', file.name);
            };
            
            img.onerror = () => {
                console.warn('‚ö†Ô∏è Error precargando thumbnail:', file.name);
            };
        });
    },

    // üñºÔ∏è Generar placeholder para archivos sin thumbnail
    generatePlaceholderThumbnail(filename, size = 'w-12 h-12') {
        const extension = filename.split('.').pop()?.toLowerCase() || '';
        
        let icon = 'üìÑ';
        let bgColor = 'bg-gray-100';
        let textColor = 'text-gray-400';
        
        // Iconos espec√≠ficos por tipo de archivo
        switch (extension) {
            case 'gcode':
            case 'g':
            case 'gco':
                icon = 'üñ®Ô∏è';
                bgColor = 'bg-blue-100';
                textColor = 'text-blue-400';
                break;
            case 'stl':
                icon = 'üóø';
                bgColor = 'bg-purple-100';
                textColor = 'text-purple-400';
                break;
            case 'obj':
                icon = 'üìê';
                bgColor = 'bg-green-100';
                textColor = 'text-green-400';
                break;
            default:
                icon = 'üìÑ';
                bgColor = 'bg-gray-100';
                textColor = 'text-gray-400';
        }
        
        return `
            <div class="${size} ${bgColor} rounded-lg flex items-center justify-center ${textColor}" title="${window.FleetCards.Utils.escapeHtml(filename)}">
                <span class="text-lg">${icon}</span>
            </div>
        `;
    },

    // üñºÔ∏è Crear elemento de thumbnail con fallback
    createThumbnailElement(file, printerId, size = 'w-12 h-12', clickable = true) {
        const filename = file.name;
        const hasThumbnail = file.thumbnail_path;
        
        if (!hasThumbnail) {
            return this.generatePlaceholderThumbnail(filename, size);
        }
        
        const imageUrl = `/api/fleet/printers/${printerId}/files/thumbnail/${encodeURIComponent(filename)}`;
        const clickHandler = clickable ? `onclick="window.FleetCards.Thumbnails.showFullThumbnail('${printerId}', '${filename}', '${file.thumbnail_path}')"` : '';
        const cursorClass = clickable ? 'cursor-pointer' : '';
        
        return `
            <div class="group relative ${cursorClass}" ${clickHandler}>
                <img src="${imageUrl}" 
                     alt="Vista previa de ${window.FleetCards.Utils.escapeHtml(filename)}"
                     class="${size} object-cover rounded-lg border border-gray-200 group-hover:border-blue-300 transition-colors"
                     onerror="this.parentElement.innerHTML='${this.generatePlaceholderThumbnail(filename, size).replace(/'/g, '\\\'')}';">
                ${clickable ? `
                <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 rounded-lg transition-opacity flex items-center justify-center">
                    <span class="text-white opacity-0 group-hover:opacity-100 text-xs">üîç</span>
                </div>
                ` : ''}
            </div>
        `;
    },

    // üìä Obtener estad√≠sticas de thumbnails
    getThumbnailStats(files) {
        const stats = {
            total: files.length,
            withThumbnails: 0,
            withoutThumbnails: 0,
            percentage: 0
        };
        
        files.forEach(file => {
            if (file.thumbnail_path) {
                stats.withThumbnails++;
            } else {
                stats.withoutThumbnails++;
            }
        });
        
        stats.percentage = stats.total > 0 ? (stats.withThumbnails / stats.total * 100).toFixed(1) : 0;
        
        return stats;
    },

    // üßπ Limpiar cache de thumbnails (si implementamos cache en el futuro)
    clearThumbnailCache(printerId = null) {
        console.log('üßπ Limpiando cache de thumbnails' + (printerId ? ` para impresora: ${printerId}` : ''));
        
        // Nota: Esta funci√≥n est√° preparada para futuras implementaciones de cache
        // Por ahora solo registra la acci√≥n
        
        if (window.FleetCards.Core) {
            window.FleetCards.Core.showToast('üßπ Cache de thumbnails limpiado', 'info');
        }
    },

    // üîç Buscar archivos por thumbnail disponible
    filterFilesByThumbnail(files, hasThumb = true) {
        return files.filter(file => {
            const hasThumbnail = Boolean(file.thumbnail_path);
            return hasThumb ? hasThumbnail : !hasThumbnail;
        });
    },

    // üì± Adaptar tama√±o de thumbnail seg√∫n viewport
    getResponsiveThumbnailSize() {
        const width = window.innerWidth;
        
        if (width < 640) { // sm
            return 'w-10 h-10';
        } else if (width < 768) { // md
            return 'w-12 h-12';
        } else if (width < 1024) { // lg
            return 'w-14 h-14';
        } else { // xl and up
            return 'w-16 h-16';
        }
    },

    // üß™ Funci√≥n de prueba
    testThumbnails() {
        console.log('üß™ Ejecutando test de gesti√≥n de thumbnails...');
        
        // Test con datos de ejemplo
        const testFiles = [
            {
                name: 'model_with_thumb.gcode',
                thumbnail_path: '/path/to/thumb.jpg'
            },
            {
                name: 'model_without_thumb.gcode',
                thumbnail_path: null
            },
            {
                name: 'another_model.g',
                thumbnail_path: undefined
            }
        ];
        
        // Test estad√≠sticas
        const stats = this.getThumbnailStats(testFiles);
        console.log('üìä Estad√≠sticas de thumbnails:', stats);
        
        // Test filtros
        const withThumbs = this.filterFilesByThumbnail(testFiles, true);
        const withoutThumbs = this.filterFilesByThumbnail(testFiles, false);
        
        console.log('üñºÔ∏è Archivos con thumbnails:', withThumbs.length);
        console.log('üìÑ Archivos sin thumbnails:', withoutThumbs.length);
        
        // Test placeholders
        testFiles.forEach(file => {
            const placeholder = this.generatePlaceholderThumbnail(file.name);
            console.log(`üìã Placeholder para ${file.name}:`, placeholder);
        });
        
        console.log('‚úÖ Test de thumbnails completado');
    }
};

console.log('üñºÔ∏è M√≥dulo FleetCards.Thumbnails cargado');
